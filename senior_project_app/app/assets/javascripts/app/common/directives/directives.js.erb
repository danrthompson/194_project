angular.module('common.directives', [])

.directive('emailFrame', [function(){
	return {
		restrict: 'A', // E = Element, A = Attribute, C = Class, M = Comment
		link: function($scope, iElm, iAttrs, controller) {
			iElm.bind('load', function(e) {
				var contents = iElm.contents(),
					head = $('head', contents);

				head.append('<%= stylesheet_link_tag "email", :media => "all" %>');

				$('a', contents).attr('target', '_blank');

				window.setTimeout(function() {
					iElm.css({
						height: contents.find('body').height() + 20
					});
				}, 100);
			});
		}
	};
}])

.filter('displayFrom', function() {
	return function(email) {
		var address = _.find(email.email_addresses, function(d) {
			return d.type === "from";
		});

		if (address.name) {
			return address.name;
		} else {
			return address.address;
		}
	}
})

.filter('nameOrAddress', function() {
	return function(address) {
		return address.address;
	}
})

.directive('contact', [function() {
	// Runs during compile
	return {
		// name: '',
		// priority: 1,
		// terminal: true,
		scope: {
			address: '='
		}, // {} = isolate, true = child, false/undefined = no change
		// controller: function($scope, $element, $attrs, $transclude) {},
		// require: 'ngModel', // Array = multiple requires, ? = optional, ^ = check parent elements
		restrict: 'A', // E = Element, A = Attribute, C = Class, M = Comment
		template: '{{ address.type }}: {{ address | nameOrAddress }}',
		// templateUrl: '',
		// replace: true,
		// transclude: true,
		// compile: function(tElement, tAttrs, function transclude(function(scope, cloneLinkingFn){ return function linking(scope, elm, attrs){}})),
		link: function($scope, iElm, iAttrs, controller) {
		}
	};
}]);